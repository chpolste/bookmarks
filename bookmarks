#!/usr/bin/env python3

import argparse
import glob
import os
import sqlite3
import sys


class BookmarkPrinter:
    """Read and print bookmarks from a Firefox places.sqlite file"""

    def __init__(self, uri, colors=True):
        self.conn = sqlite3.connect(uri, uri=True)
        self.conn.row_factory = sqlite3.Row
        self._colors = colors

    def print_bookmarks(self, root=0, indentation=0):
        with self.conn:
            rows = self.conn.execute("""
                    SELECT
                        moz_bookmarks.id as id,
                        moz_bookmarks.type as type,
                        moz_bookmarks.title as title,
                        moz_places.url as url
                    FROM
                        moz_bookmarks
                    LEFT JOIN
                        moz_places
                    ON
                        moz_bookmarks.fk = moz_places.id
                    WHERE
                        moz_bookmarks.parent = :parent
                        AND moz_bookmarks.id != :parent
                    ORDER BY
                        moz_bookmarks.position ASC;
                    """, { "parent": root })
            for row in rows:
                if row["type"] == 1:
                    self._print_url(row, indentation)
                elif row["type"] == 2:
                    self._print_dir(row, indentation)
                elif row["type"] == 3:
                    self._print_sep(row, indentation)
                else:
                    raise ValueError("unknown bookmark type {}".format(row["type"]))
                # Recurse
                self.print_bookmarks(row["id"], indentation=indentation+1)

    def _print_url(self, row, indentation):
        indent = self._make_indent(indentation)
        print(indent, row["title"])
        print(indent, self._colorize(row["url"], "37"))

    def _print_dir(self, row, indentation):
        indent = self._make_indent(indentation)
        print(indent, self._colorize(row["title"], "1"))

    def _print_sep(self, row, indentation):
        indent = self._make_indent(indentation)
        print(indent, self._colorize("-----", "1"))

    def _make_indent(self, indentation):
        return self._colorize("| " * (indentation - 1) + "|", "37")

    def close_connection(self):
        self.conn.close()

    def _colorize(self, text, color):
        return "\33[{}m{}\33[0m".format(color, text) if self._colors else text
        


parser = argparse.ArgumentParser(description="""
    Print Firefox bookmarks to the console.
""")
parser.add_argument("-i", "--ignore-lock", action="store_true", help="""
    ignore any lock on the places.sqlite file by connecting to the database
    with nolock=1 set. Because this program does not write to the database and
    connects in read-only mode, this should not lead to any data corruption.
    Enable at your own risk.
""")
parser.add_argument("-t", "--text-only", action="store_true", help="""
    print without formatting escape characters.
""")
parser.add_argument("profile", nargs="?", type=str, default="*.default", help="""
    name of the profile whose bookmarks are read. Glob wildcards as well as `~'
    as a shortcut to the home directory can be used. If the name contains a '/'
    it is treated as a path to the profile folder, otherwise look for
    a matching folder in '~/.mozilla/firefox'. Relative paths can be specified
    by prepending './'. If no profile is specified, bookmarks from the first
    profile matching the name '*.default' are printed.
""")


if __name__ == "__main__":

    args = parser.parse_args()

    # If the profile name is not specified as a path, search in the default
    # location in the user's home directory
    profile = args.profile
    if "/" not in profile:
        profile = os.path.join("~/.mozilla/firefox", profile)
    profile = os.path.expanduser(profile)
    try:
        db_file = glob.glob(os.path.join(profile, "places.sqlite"))[0]
    except IndexError:
        print("places.sqlite not found in '{}'".format(profile))
        sys.exit(1)

    # Open database in read-only mode and disable calls to lock methods if
    # desired by user
    db_uri = "file:{}?mode=ro".format(db_file)
    if args.ignore_lock:
        db_uri += "&nolock=1"

    print("profile: " + os.path.dirname(db_file))
    try:
        printer = BookmarkPrinter(db_uri, not args.text_only)
        printer.print_bookmarks()
    except sqlite3.OperationalError as e:
        msg = str(e)
        if "locked" in msg:
            print("Error: Bookmarks cannot be read because database is locked.")
            print("The -i flag can be used to ignore the lock. Consult the help for more information.")
            sys.exit(1)
        else:
            raise
    finally:
        printer.close_connection()

